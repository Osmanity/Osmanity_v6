{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  defineNestedType,\r\n  makeSource,\r\n} from \"contentlayer/source-files\";\r\n\r\nimport GithubSlugger from \"github-slugger\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\nconst Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `blog/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the post\",\r\n      required: true,\r\n    },\r\n    excerpt: {\r\n      type: \"string\",\r\n      description: \"The description of the post\",\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      description: \"The date of the post\",\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: \"string\",\r\n      description: \"The featured image of the post\",\r\n      required: true,\r\n    },\r\n    author: {\r\n      type: \"string\",\r\n      description: \"The author of the post\",\r\n      required: true,\r\n    },\r\n    categories: {\r\n      type: \"list\",\r\n      of: Category,\r\n      description: \"The categories of the post\",\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n      description: \"The tags of the post\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n    },\r\n    toc: {\r\n      type: \"json\",\r\n      resolve: async (doc) => {\r\n        const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\r\n        const slugger = new GithubSlugger();\r\n        const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(\r\n          ({ groups }) => {\r\n            const flag = groups?.flag;\r\n            const content = groups?.content;\r\n\r\n            return {\r\n              level:\r\n                flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\r\n              text: content,\r\n              slug: content ? slugger.slug(content) : undefined,\r\n            };\r\n          },\r\n        );\r\n\r\n        return headings;\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst Category = defineNestedType(() => ({\r\n  name: \"Category\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the category\",\r\n      required: true,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Project = defineDocumentType(() => ({\r\n  name: \"Project\",\r\n  filePathPattern: `projects/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the project\",\r\n      required: true,\r\n    },\r\n    location: {\r\n      type: \"string\",\r\n      description: \"The location of the project\",\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      description: \"The date of the project\",\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: \"string\",\r\n      description: \"The featured image of the project\",\r\n      required: true,\r\n    },\r\n    client: {\r\n      type: \"string\",\r\n      description: \"The client of the project\",\r\n      required: true,\r\n    },\r\n    role: {\r\n      type: \"string\",\r\n      description: \"The role of the project\",\r\n      required: true,\r\n    },\r\n    year: {\r\n      type: \"string\",\r\n      description: \"The year of the project\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n    },\r\n    toc: {\r\n      type: \"json\",\r\n      resolve: async (doc) => {\r\n        const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\r\n        const slugger = new GithubSlugger();\r\n        const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(\r\n          ({ groups }) => {\r\n            const flag = groups?.flag;\r\n            const content = groups?.content;\r\n\r\n            return {\r\n              level:\r\n                flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\r\n              text: content,\r\n              slug: content ? slugger.slug(content) : undefined,\r\n            };\r\n          },\r\n        );\r\n\r\n        return headings;\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst codeOptions = {\r\n  theme: \"github-dark\",\r\n  grid: false,\r\n};\r\n\r\nexport default makeSource({  \r\n  contentDirPath: \"content\",\r\n  documentTypes: [Post, Project],\r\n  mdx: { \r\n    remarkPlugins: [remarkGfm], \r\n    rehypePlugins: [\r\n      rehypeSlug, \r\n      [rehypeAutolinkHeadings, { behavior: \"append\" }], \r\n      [rehypePrettyCode, codeOptions] \r\n    ],\r\n    \r\n  }\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
